import biot_savart as bs

import numpy as np
from scipy.optimize import lsq_linear
import math

class lsq_optimizer:

    def __init__(self):
        self.map = None
        self.coils = list()
        self.numCoils = 0

    def setMap(self, map):
        self.map = map

    def generateMap(self):
        self.map = np.random.uniform(-100, 100, (11, 11, 11))
    
    def generateZeroMap(self):
        self.map = np.zeros((11, 11, 11))

    def generateOnesMap(self):
        self.map = np.ones((11, 11, 11))

    def generateReverseMap(self):

        optimizer.generateCoil("reverse.txt", 1, 10, 0, 0, 5, 'x', 0)
        optimizer.generateCoil("reverse2.txt", 1, 10, 0, 0, -5, 'x', 0)
        optimizer.generateCoil("reverse3.txt", 1, 10, 0, 5, 0, 'x', 90)
        optimizer.generateCoil("reverse4.txt", 1, 10, 0, -5, 0, 'x', 270)
        optimizer.generateCoil("reverse5.txt", 1, 10, 5, 0, 0, 'y', 90)
        optimizer.generateCoil("reverse6.txt", 1, 10, -5, 0, 0, 'y', 270)

        self.coils = list()

        bs.write_target_volume("reverse.txt", "reverse", (10, 10, 10), (-5, -5, -5), 1, 1)
        bs.write_target_volume("reverse2.txt", "reverse2", (10, 10, 10), (-5, -5, -5), 1, 1)
        bs.write_target_volume("reverse3.txt", "reverse3", (10, 10, 10), (-5, -5, -5), 1, 1)
        bs.write_target_volume("reverse4.txt", "reverse4", (10, 10, 10), (-5, -5, -5), 1, 1)
        bs.write_target_volume("reverse5.txt", "reverse5", (10, 10, 10), (-5, -5, -5), 1, 1)
        bs.write_target_volume("reverse6.txt", "reverse6", (10, 10, 10), (-5, -5, -5), 1, 1)

        fields, _ = bs.read_target_volume("reverse")
        fields2, _ = bs.read_target_volume("reverse2")
        fields3, _ = bs.read_target_volume("reverse3")
        fields4, _ = bs.read_target_volume("reverse4")
        fields5, _ = bs.read_target_volume("reverse5")
        fields6, _ = bs.read_target_volume("reverse6")

        fields += fields2 + fields3 + fields4 + fields5 + fields6
        self.map = fields[:, :, :, 2] / 10000 * 42.58 * 100000

    def generateCoil(self, filename, current, diameter, center_x, center_y, center_z, rotation_axis='x', rotation_angle=0):

        """
        Generates the coordinates for a loop and writes them to a file.

        filename: Name of the file to store the coordinates
        curret: Electric current value
        diameter: Diameter of loop
        center_x: x-coordinate of the loop's center
        center_y: y-coordinate of the loop's center
        center_z: z-coordinate of the loop's center
        """

        self.coils.append(filename)
        self.numCoils += 1

        num_points = 201
        radius = diameter / 2

        with open(filename, 'w') as file:
            for i in range(num_points):
                angle = 2 * math.pi * i / (num_points - 1)
                x = center_x + radius * math.cos(angle)
                y = center_y + radius * math.sin(angle)
                z = center_z

                if rotation_angle:
                # Rotate the point

                    def rotate_point(point, axis, angle_degrees, center):
                        """
                        Rotate a point around a specified axis by a given angle in degrees.

                        point: Tuple (x, y, z) representing the point.
                        axis: Axis of rotation ('x', 'y', or 'z').
                        angle_degrees: Angle of rotation in degrees.
                        center: The center point about which to rotate.

                        returns a rotated point as a tuple (x, y, z).
                        """
                        angle_radians = math.radians(angle_degrees)
                        x, y, z = point
                        cx, cy, cz = center

                        # Translate point back to the origin
                        x -= cx
                        y -= cy
                        z -= cz

                        # Apply rotation
                        if axis == 'x':
                            rotation_matrix = np.array([
                                [1, 0, 0],
                                [0, math.cos(angle_radians), -math.sin(angle_radians)],
                                [0, math.sin(angle_radians), math.cos(angle_radians)]
                            ])
                        elif axis == 'y':
                            rotation_matrix = np.array([
                                [math.cos(angle_radians), 0, math.sin(angle_radians)],
                                [0, 1, 0],
                                [-math.sin(angle_radians), 0, math.cos(angle_radians)]
                            ])
                        else:  # axis == 'z'
                            rotation_matrix = np.array([
                                [math.cos(angle_radians), -math.sin(angle_radians), 0],
                                [math.sin(angle_radians), math.cos(angle_radians), 0],
                                [0, 0, 1]
                            ])

                        rotated_point = np.dot(rotation_matrix, [x, y, z])

                        # Translate point back to its original center
                        return tuple(rotated_point + np.array([cx, cy, cz]))
                    
                    x, y, z = rotate_point((x, y, z), rotation_axis, rotation_angle, (center_x, center_y, center_z))

                file.write(f"{x},{y},{z},{current}\n")

    def printMap(self):
        assert self.numCoils, "Please generate a coil."

        sumfields = 0

        for coil in self.coils:
            bs.write_target_volume(coil, coil, (10, 10, 10), (-5, -5, -5), 1, 1)
            fields, _ = bs.read_target_volume(coil)
            sumfields += fields[:, :, :, 2]

        print(sumfields)

    def optimizeMap(self, target_volume):
        assert self.map is not None, "Please set or generate a field map to correct."
        assert self.numCoils, "Please generate a coil."

        temp = list()

        for coil in self.coils:
            bs.write_target_volume(coil, "coil", target_volume, target_volume / 2 * -1, 1, 1)
            fields, _ = bs.read_target_volume("coil")
            temp.append(fields[:, :, :, 2].ravel() / 10000 * 42.58 * 100000)

        temp = np.stack(temp, axis=1)
        x = lsq_linear(temp, self.map.ravel()).x

        print("\nHere are the currents that optimize the correction of the inputted field map:\n\n" + 
              str(x) +  
              "\n")
        
        self.lsq_currents = x
        self.coils = list()
            

# Test

"""
optimizer = lsq_optimizer()
optimizer.generateReverseMap()

optimizer.coils = list()

optimizer.generateCoil("test.txt", 1, 10, 0, 0, 5, 'x', 0)

optimizer.generateCoil("test2.txt", 1, 10, 0, 0, -5, 'x', 0)
optimizer.generateCoil("test3.txt", 1, 10, 0, 5, 0, 'x', 90)
optimizer.generateCoil("test4.txt", 1, 10, 0, -5, 0, 'x', 270)
optimizer.generateCoil("test5.txt", 1, 10, 5, 0, 0, 'y', 90)
optimizer.generateCoil("test6.txt", 1, 10, -5, 0, 0, 'y', 270)
optimizer.optimizeMap((10, 10, 10))

optimizer.coils = list()

optimizer.generateCoil("output.txt", optimizer.lsq_currents[0], 10, 0, 0, 5, 'x', 0)
optimizer.generateCoil("output2.txt", optimizer.lsq_currents[1], 10, 0, 0, -5, 'x', 0)
optimizer.generateCoil("output3.txt", optimizer.lsq_currents[2], 10, 0, 5, 0, 'x', 90)
optimizer.generateCoil("output4.txt", optimizer.lsq_currents[3], 10, 0, -5, 0, 'x', 270)
optimizer.generateCoil("output5.txt", optimizer.lsq_currents[4], 10, 5, 0, 0, 'y', 90)
optimizer.generateCoil("output6.txt", optimizer.lsq_currents[5], 10, -5, 0, 0, 'y', 270)

bs.write_target_volume("output.txt", "output", (10, 10, 10), (-5, -5, -5), 1, 1)
bs.write_target_volume("output2.txt", "output2", (10, 10, 10), (-5, -5, -5), 1, 1)
bs.write_target_volume("output3.txt", "output3", (10, 10, 10), (-5, -5, -5), 1, 1)
bs.write_target_volume("output4.txt", "output4", (10, 10, 10), (-5, -5, -5), 1, 1)
bs.write_target_volume("output5.txt", "output5", (10, 10, 10), (-5, -5, -5), 1, 1)
bs.write_target_volume("output6.txt", "output6", (10, 10, 10), (-5, -5, -5), 1, 1)

fields, _ = bs.read_target_volume("output")
fields2, _ = bs.read_target_volume("output2")
fields3, _ = bs.read_target_volume("output3")
fields4, _ = bs.read_target_volume("output4")
fields5, _ = bs.read_target_volume("output5")
fields6, _ = bs.read_target_volume("output6")

fields += fields2 + fields3 + fields4 + fields5 + fields6
temp = optimizer.map
temp2 = fields[:, :, :, 2] / 10000 * 42.58 * 100000

optimized = temp - temp2
print(optimized)

"""
